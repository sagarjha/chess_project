#lang racket

(require "lc.ss")
(require "2D-vector.ss")
(require "list-functions.ss")
(require "positions.ss")
(provide (all-defined-out))

(define chess-piece%
  (class object%
	 (super-new)
	 (define/public (resolvable? half-position new-pos)
	   (foldr (lambda (val pred) (if pred
					 (foldr (lambda (val-one pred-one)
						  (and pred-one (not (equal? val-one new-pos))))
						#t (cdr val))
					 #f))
		  #t half-position))
	 
	 (define/public (filter-posn pair-position lst)
	   (take-while (lambda (new-move) 
			 (resolvable? (car pair-position) new-move))
		       (lambda (new-move)
			 (resolvable? (cdr pair-position) new-move))
		       lst))))

(define pawn%
  (class chess-piece%
	 (super-new)
	 (define/public (valid? board-position move pos new-pos)
	   (if (member new-pos (give-all-moves board-position move pos))
	       #t #f))
	 
	 (define/public (give-all-moves board-position move pos)
	   (let* ([file (car pos)]
		  [rank (cdr pos)]
		  [pair-position (if (eq? move "white")
				     board-position
				     (cons (cdr board-position) (car board-position)))])
	     (cond [(eq? move "white")
		    (let* ([one-step-ahead (if (or (= rank 8) 
						   (not (send this resolvable? (car pair-position) (cons file (+ rank 1))))
						   (not (send this resolvable? (cdr pair-position) (cons file (+ rank 1)))))
					       #f (cons file (+ rank 1)))]
			   [two-steps-ahead (if (and (send this resolvable? (car pair-position) (cons file (+ rank 2)))
						     (send this resolvable? (cdr pair-position) (cons file (+ rank 2)))
						     (= rank 2) one-step-ahead)
						(cons file (+ rank 2)) #f)]
			   [capture-left (cond [(and (not (send this resolvable? (cdr pair-position) (cons (- file 1) (+ rank 1))))
						     (not (= file 1)) (not (= rank 8)))
						(cons (- file 1) (+ rank 1))]
					       [else #f])]
			   [capture-right (cond [(and (not (send this resolvable? (cdr pair-position) (cons (+ file 1) (+ rank 1))))
						      (not (= file 8)) (not (= rank 8)))
						 (cons (+ file 1) (+ rank 1))]
						[else #f])])
		      (remove-val #f (list one-step-ahead two-steps-ahead capture-left capture-right)))]
		   [(eq? move "black")
		    (let* ([one-step-ahead (if (or (= rank 1)
						   (not (send this resolvable? (car pair-position) (cons file (- rank 1))))
						   (not (send this resolvable? (cdr pair-position) (cons file (- rank 1)))))
					       #f (cons file (- rank 1)))]
			   [two-steps-ahead (if (and (send this resolvable? (car pair-position) (cons file (- rank 2)))
						     (send this resolvable? (cdr pair-position) (cons file (- rank 2)))
						     (= rank 7) one-step-ahead)
						(cons file (- rank 2)) #f)]
			   [capture-left (cond [(and (not (send this resolvable? (cdr pair-position) (cons (- file 1) (- rank 1))))
						     (not (= file 1)) (not (= rank 1)))
						(cons (- file 1) (- rank 1))]
					       [else #f])]
			   [capture-right (cond [(and (not (send this resolvable? (cdr pair-position) (cons (+ file 1) (- rank 1))))
						      (not (= file 8)) (not (= rank 1)))
						 (cons (+ file 1) (- rank 1))]
						[else #f])])
		      (remove-val #f (list one-step-ahead two-steps-ahead capture-left capture-right)))])))))

(define knight%
  (class chess-piece%
	 (super-new)
	 (define/public (valid? board-position move pos new-pos)
	   (if (member new-pos (give-all-moves board-position move pos))
	       #t #f))

	 (define/public (give-all-moves board-position move pos)
	   (let* ([file (car pos)]
		  [rank (cdr pos)]
		  [half-position (if (eq? move "white")
				     (car board-position)
				     (cdr board-position))])
	     (filter (lambda (new-pos) (send this resolvable? half-position new-pos))
		     (append (lc (cons x y) : x <- (list (- file 1) (+ file 1)) 
				 y <- (list (- rank 2) (+ rank 2))
				 * (> x 0) * (> y 0) * ( < x 9) * (< y 9))
			     (lc (cons x y) : x <- (list (- file 2) (+ file 2))
				 y <- (list (- rank 1) (+ rank 1))
				 * (> x 0) * (> y 0) * ( < x 9) * (< y 9))))))))

(define bishop%
  (class chess-piece%
	 (super-new)
	 (define/public (valid? board-position move pos new-pos)
	   (if (member new-pos (give-all-moves board-position move pos))
	       #t #f))

	 (define/public (give-all-moves board-position move pos)
	   (let* ([file (car pos)]
		  [rank (cdr pos)]
		  [move-range (range 1 8)]
		  [pair-position (if (eq? move "white")
				     board-position
				     (cons (cdr board-position) (car board-position)))])
	     (append 
	      (send this filter-posn pair-position
		    (lc (cons (+ file x) (+ rank x)) : x <- move-range 
			* (> (+ file x) 0) * (> (+ rank x) 0) 
			* (< (+ file x) 9) * (< (+ rank x) 9)))
	      (send this filter-posn pair-position
		    (lc (cons (- file x) (- rank x)) : x <- move-range 
			* (> (- file x) 0) * (> (- rank x) 0) 
			* (< (- file x) 9) * (< (- rank x) 9)))
	      (send this filter-posn pair-position
		    (lc (cons (+ file x) (- rank x)) : x <- move-range 
			* (> (+ file x) 0) * (> (- rank x) 0) 
			* (< (+ file x) 9) * (< (- rank x) 9)))
	      (send this filter-posn pair-position
		    (lc (cons (- file x) (+ rank x)) : x <- move-range 
			* (> (- file x) 0) * (> (+ rank x) 0)
			* (< (- file x) 9) * (< (+ rank x) 9))))))))

(define rook%
  (class chess-piece%
	 (super-new)
	 (define/public (valid? board-position move pos new-pos)
	   (if (member new-pos (give-all-moves board-position move pos))
	       #t #f))

	 (define/public (give-all-moves board-position move pos)
	   (let* ([file (car pos)]
		  [rank (cdr pos)]
		  [move-range (range 1 8)]
		  [pair-position (if (eq? move "white")
				     board-position
				     (cons (cdr board-position) (car board-position)))])
	     (append 
	      (send this filter-posn pair-position
		    (lc (cons (+ file x) rank) : x <- move-range 
			* (> (+ file x) 0) * (< (+ file x) 9)))
	      (send this filter-posn pair-position
		    (lc (cons (- file x) rank) : x <- move-range 
			* (> (- file x) 0) * (< (- file x) 9)))
	      (send this filter-posn pair-position
		    (lc (cons file (+ rank x)) : x <- move-range 
			* (> (+ rank x) 0) * (< (+ rank x) 9)))
	      (send this filter-posn pair-position
		    (lc (cons file (- rank x)) : x <- move-range 
			* (> (- rank x) 0) * (< (- rank x) 9))))))))

(define queen%
  (class chess-piece%
	 (super-new)
	 (define/public (valid? board-position move pos new-pos)
	   (if (member new-pos (give-all-moves board-position move pos))
	       #t #f))

	 (define/public (give-all-moves board-position move pos)
	   (let* ([file (car pos)]
		  [rank (cdr pos)]
		  [move-range (range 1 8)]
		  [pair-position (if (eq? move "white")
				     board-position
				     (cons (cdr board-position) (car board-position)))])
	     (append 
	      (send this filter-posn pair-position
		    (lc (cons (+ file x) (+ rank x)) : x <- move-range 
			* (> (+ file x) 0) * (> (+ rank x) 0) 
			* (< (+ file x) 9) * (< (+ rank x) 9)))
	      (send this filter-posn pair-position
		    (lc (cons (- file x) (- rank x)) : x <- move-range 
			* (> (- file x) 0) * (> (- rank x) 0) 
			* (< (- file x) 9) * (< (- rank x) 9)))
	      (send this filter-posn pair-position
		    (lc (cons (+ file x) (- rank x)) : x <- move-range 
			* (> (+ file x) 0) * (> (- rank x) 0) 
			* (< (+ file x) 9) * (< (- rank x) 9)))
	      (send this filter-posn pair-position
		    (lc (cons (- file x) (+ rank x)) : x <- move-range 
			* (> (- file x) 0) * (> (+ rank x) 0)
			* (< (- file x) 9) * (< (+ rank x) 9)))
	      (send this filter-posn pair-position
		    (lc (cons (+ file x) rank) : x <- move-range 
			* (> (+ file x) 0) * (< (+ file x) 9)))
	      (send this filter-posn pair-position
		    (lc (cons (- file x) rank) : x <- move-range 
			* (> (- file x) 0) * (< (- file x) 9)))
	      (send this filter-posn pair-position
		    (lc (cons file (+ rank x)) : x <- move-range 
			* (> (+ rank x) 0) * (< (+ rank x) 9)))
	      (send this filter-posn pair-position
		    (lc (cons file (- rank x)) : x <- move-range 
			* (> (- rank x) 0) * (< (- rank x) 9))))))))

(define king%
  (class chess-piece%
	 (super-new)
	 (define/public (valid? board-position move pos new-pos)
	   (if (member new-pos (give-all-moves board-position move pos))
	       #t #f))

	 (define/public (give-all-moves board-position move pos)
	   (let* ([file (car pos)]
		  [rank (cdr pos)]
		  [move-range (range -7 8)]
		  [half-position (if (eq? move "white")
				     (car board-position)
				     (cdr board-position))])
	     (filter (lambda (new-pos) (send this resolvable? half-position new-pos))
		     (append (lc (cons x y) : x <- (list (- file 1) file (+ file 1))
				 y <- (list (- rank 1) rank (+ rank 1))
				 * (> x 0) * (< x 9) * (> y 0) * (< y 9)
				 * (or (not (= x file)) (not (= y rank))))))))))

(define board%
  (class object%
	 (super-new)
	 (init-field (complete-board-position initial-complete-position))
	 
	 (define dummy-pawn (make-object pawn%))
	 (define dummy-knight (make-object knight%))
	 (define dummy-rook (make-object rook%))
	 (define dummy-bishop (make-object bishop%))
	 (define dummy-queen (make-object queen%))
	 (define dummy-king (make-object king%))

	 (define (get-scew) (get-field scew complete-board-position))
	 (define (get-sceb) (get-field sceb complete-board-position))
	 (define (get-lcew) (get-field lcew complete-board-position))
	 (define (get-lceb) (get-field lceb complete-board-position))

	 

         (define/public (flip turn)
           (if (eq? turn "white")
               "black"
               "white"))
	 
	 (define (get-dummy symbol)
	   (cond [(eq? symbol "P") dummy-pawn]
		 [(eq? symbol "N") dummy-knight]
		 [(eq? symbol "R") dummy-rook]
		 [(eq? symbol "B") dummy-bishop]
		 [(eq? symbol "Q") dummy-queen]
		 [(eq? symbol "K") dummy-king]
		 [else (error "Wrong symbol")]))

	 (define (promote lst old-pos pos piece)
	   
	   (define (capture2 lst pos)
	     (define (check-if-empty one-piece-positions)
	       (if (= (length one-piece-positions) 1)
		   #t #f))
	     (define (capture-h pos-set)
	       (define piece (car pos-set))
	       (cons piece (foldr (lambda (val processed-posns)
				    (if (equal? val pos) processed-posns
					(cons val processed-posns)))
				  (list) (cdr pos-set))))
	     (foldr (lambda (cur-elem processed-list) 
		      (let* ([one-piece-pos (capture-h cur-elem)])
			(if (check-if-empty one-piece-pos)
			    processed-list
			    (cons (capture-h cur-elem) processed-list))))
		    (list) lst))

	   (add-to-list (capture2 lst old-pos) piece pos))

	 (define (add-to-list lst piece pos)
	   (let* ([piece-set (map (lambda (x) (car x)) lst)])
	     (if (member piece piece-set)
		 (foldr (lambda (val l)
			  (if (eq? (car val) piece)
			      (cons (cons (car val) (cons pos (cdr val))) l)
			      (cons val l)))
			(list) lst)
		 (cons (list piece pos) lst))))

	 (define (promotion-handler move piece)
	   (let* ([piece-promoted-position (promote (get-self-position)
						    (second move) (third move) piece)])
	     piece-promoted-position))
	 

	 (define/public (change-pos move)
	   
	   (define (change-piece-pos pos-list)
	     (foldr (lambda (elem lst) (if (equal? elem prev-pos)
					   (cons new-pos lst)
					   (cons elem lst)))
		    (list) pos-list))
	   
	   (define (change-pos-h self-pos)
	     (if (eq? (caar self-pos) piece)
		 (cons (cons piece (change-piece-pos (cdar self-pos))) (cdr self-pos))
		 (cons (car self-pos) (change-pos-h (cdr self-pos)))))
	   
	   (define piece (first move))
	   (define prev-pos (second move))
	   (define new-pos (third move))
	   (define last-rank (if (eq? (get-turn) "white") 8 1))
	   (append-properly (change-pos-h (get-self-position))
                            (capture new-pos)))

	 (define/public (change-pos2 board-pos move)
	   (define (change-piece-pos pos-list)
	     (foldr (lambda (elem lst) (if (equal? elem prev-pos)
					   (cons new-pos lst)
					   (cons elem lst)))
		    (list) pos-list))
	   
	   (define (change-pos-h self-pos)
	     (if (eq? (caar self-pos) piece)
		 (cons (cons piece (change-piece-pos (cdar self-pos))) (cdr self-pos))
		 (cons (car self-pos) (change-pos-h (cdr self-pos)))))
	   
	   (define piece (first move))
	   (define prev-pos (second move))
	   (define new-pos (third move))
	   (if (eq? (get-turn) "white") (change-pos-h (car board-pos))
	       (change-pos-h (cdr board-pos))))

	 (define/public (capture pos)

	   (define (check-if-empty one-piece-positions)
	     (if (= (length one-piece-positions) 1)
		 #t #f))
	   
	   (define (capture-h pos-set)
	     (define piece (car pos-set))
	     (cons piece (foldr (lambda (val processed-posns)
				  (if (equal? val pos) processed-posns
				      (cons val processed-posns)))
				(list) (cdr pos-set))))
	   
	   (foldr (lambda (cur-elem processed-list) 
		    (let* ([one-piece-pos (capture-h cur-elem)])
		      (if (check-if-empty one-piece-pos)
			  processed-list
			  (cons (capture-h cur-elem) processed-list))))
		  (list) (get-enemy-position)))

	 (define (process one-piece-positions)
	   (foldr (lambda (cur-pos evaluated-list)
		    (append (map (lambda (list-elem) (list (car one-piece-positions) cur-pos list-elem))
				 (send (get-dummy (car one-piece-positions)) 
				       give-all-moves (get-board-position) (get-turn) cur-pos))
			    evaluated-list))
		  (list) (cdr one-piece-positions)))
	 
	 (define/public (capturable? board-pos square var-turn)
	   (foldr (lambda (elem res-f)
	 	    (or (foldr (lambda (pos res)
	 			 (or (send (get-dummy (car elem)) valid? 
					   board-pos var-turn pos square) res))
	 		       #f (cdr elem)) res-f))
	 	  #f (get-enemy-position)))

	 (define/public (capturable2? board-pos square var-turn)
	   (define local-enemy-position
	     (if (eq? var-turn "white")
		 (car board-pos)
		 (cdr board-pos)))
	   (foldr (lambda (elem res-f)
	 	    (or (foldr (lambda (pos res)
	 			 (or (send (get-dummy (car elem)) valid? 
					   board-pos var-turn pos square) res))
	 		       #f (cdr elem)) res-f))
	 	  #f local-enemy-position))

	 (define/public (drawn?)
	   (let* ([pair-num-pieces (get-number-of-pieces)]
		  [num-self-pieces (car pair-num-pieces)]
		  [num-enemy-pieces (cdr pair-num-pieces)]
		  [num-total-pieces (+ num-self-pieces num-enemy-pieces)]
		  [num-self-knights (get-number-of-one-piece "N" #t)]
		  [num-enemy-knights (get-number-of-one-piece "N" #f)]
		  [num-self-light-bishops (get-number-of-bishops  #t #t)]
		  [num-self-dark-bishops (get-number-of-bishops #t #f)]
		  [num-enemy-light-bishops (get-number-of-bishops  #f #t)]
		  [num-enemy-dark-bishops (get-number-of-bishops  #f #f)])
	     (cond [(eq? num-total-pieces 2) #t]
		   [(and (eq? num-total-pieces 3) (eq? (+ num-self-knights num-enemy-knights) 1))
		    #t]
		   [(or (eq? (+ num-self-light-bishops num-enemy-light-bishops) (- num-total-pieces 2))
			(eq? (+ num-self-dark-bishops num-enemy-dark-bishops) (- num-total-pieces 2)))
		    #t]
		   [else #f])))

	 (define (get-number-of-bishops side color)
	   (cond [(and (eq? side #t) (eq? color #t))
		    (length (lc y : y <- (car-if-not-null (lc (cdr one-piece-list) : one-piece-list <- (get-self-position)
					   * (eq? (car one-piece-list) "B")))
			      * (even? (+ (car y) (cdr y)))))]
		 [(and (eq? side #t) (eq? color #f))
		  (length (lc y : y <- (car-if-not-null (lc (cdr one-piece-list) : one-piece-list <- (get-self-position)
					   * (eq? (car one-piece-list) "B")))
			      * (odd? (+ (car y) (cdr y)))))]
		 [(and (eq? side #f) (eq? color #t))
		  (length (lc y : y <- (car-if-not-null (lc (cdr one-piece-list) : one-piece-list <- (get-enemy-position)
					   * (eq? (car one-piece-list) "B")))
			      * (even? (+ (car y) (cdr y)))))]
		 [(and (eq? side #f) (eq? color #f))
		  (length (lc y : y <- (car-if-not-null (lc (cdr one-piece-list) : one-piece-list <- (get-enemy-position)
					   * (eq? (car one-piece-list) "B")))
			      * (odd? (+ (car y) (cdr y)))))]))
		 
	 (define (get-number-of-one-piece piece side)
	   (if (eq? side #t)
	       (/ (length (flatten (lc (cdr one-piece-list) : one-piece-list <- (get-self-position)
				* (eq? (car one-piece-list) piece)))) 2)
	       (/ (length (flatten (lc (cdr one-piece-list) : one-piece-list <- (get-enemy-position)
				* (eq? (car one-piece-list) piece)))) 2)))
	       
	 (define (get-number-of-pieces)
	   (cons
	    (foldr (lambda (one-piece-positions processed-length)
		     (+ (- (length one-piece-positions) 1) processed-length))
		   0 (get-self-position))
	    (foldr (lambda (one-piece-positions processed-length)
		     (+ (- (length one-piece-positions) 1) processed-length))
		   0 (get-enemy-position))))

	 (define/public (king-in-check? board-pos)
	   (define local-self-position
	     (if (eq? (get-turn) "white")
		   (car board-pos)
		   (cdr board-pos)))
	   (define (get-king-pos)
	     (foldr (lambda (elem found-pos)
	   	      (if found-pos found-pos
	   		  (if (eq? (first elem) "K")
	   		      (second elem)
	   		      #f)))
	   	    #f local-self-position))
           (capturable2? board-pos (get-king-pos) (flip (get-turn))))

	 (define (king-side-castling-position)
	   (let* ([dummy-piece (new chess-piece%)]
	 	  [rank (if (eq? (get-turn) "white")
	 		    1 8)]
	 	  [short-castle-enable (if (eq? (get-turn) "white")
	 				   (get-scew)
	 				   (get-sceb))]
	 	  [board-pos (get-board-position)]
	 	  [self-position (get-self-position)]
	 	  [enemy-position (get-enemy-position)])

	     (if short-castle-enable
		 (if (and (send dummy-piece resolvable? self-position (cons 6 rank))
			  (send dummy-piece resolvable? self-position (cons 7 rank))
			  (send dummy-piece resolvable? enemy-position (cons 6 rank))
			  (send dummy-piece resolvable? enemy-position (cons 7 rank))
			  (not (capturable? board-pos (cons 5 rank) (get-turn)))
			  (not (capturable? board-pos (cons 6 rank) (get-turn)))
			  (not (capturable? board-pos (cons 7 rank) (get-turn))))
		     (if (eq? (get-turn) "white")
                         (list (make-object complete-position%
					    (cons (change-pos2 (change-pos (list "K" (cons 5 rank) (cons 7 rank)))
							       (list "R" (cons 8 rank) (cons 6 rank)))
						  enemy-position)
					    (flip (get-turn)) "O-O"
					    #f (get-sceb) #f (get-lceb)))
			 (list (make-object complete-position%
					    (cons enemy-position
						  (change-pos2 (change-pos (list "K" (cons 5 rank) (cons 7 rank)))
							       (list "R" (cons 8 rank) (cons 6 rank))))
					    (flip (get-turn)) "O-O"
					    (get-scew) #f (get-lcew) #f)))
		     (list))
		 (list))))

	 (define (queen-side-castling-position)
	   (let* ([dummy-piece (new chess-piece%)]
	 	  [rank (if (eq? (get-turn) "white")
	 		    1 8)]
	 	  [short-castle-enable (if (eq? (get-turn) "white")
	 				   (get-scew)
	 				   (get-sceb))]
	 	  [long-castle-enable (if (eq? (get-turn) "white")
	 				  (get-lcew)
	 				  (get-lceb))]
                  [board-pos (get-board-position)]
	 	  [self-position (get-self-position)]
	 	  [enemy-position (get-enemy-position)])
	     (if long-castle-enable
		 (if (and (send dummy-piece resolvable? self-position (cons 4 rank))
			  (send dummy-piece resolvable? self-position (cons 3 rank))
			  (send dummy-piece resolvable? self-position (cons 2 rank))
			  (send dummy-piece resolvable? enemy-position (cons 4 rank))
			  (send dummy-piece resolvable? enemy-position (cons 3 rank))
			  (send dummy-piece resolvable? enemy-position (cons 2 rank))
			  (not (capturable? board-pos (cons 5 rank) (get-turn)))
			  (not (capturable? board-pos (cons 4 rank) (get-turn)))
			  (not (capturable? board-pos (cons 3 rank) (get-turn))))
		     (if (eq? (get-turn) "white")
			 (list (make-object complete-position%
					    (cons (change-pos2 (change-pos (list "K" (cons 5 rank) (cons 3 rank)))
							       (list "R" (cons 1 rank) (cons 4 rank)))
						  enemy-position)
					    (flip (get-turn)) "O-O-O" 
					    #f (get-sceb) #f (get-lceb)))
			 (list (make-object complete-position%
					    (cons enemy-position
						  (change-pos2 (change-pos (list "K" (cons 5 rank) (cons 3 rank)))
							       (list "R" (cons 1 rank) (cons 4 rank))))
					    (flip (get-turn)) "O-O-O"
					    (get-scew) #f (get-lcew) #f)))
		     (list))
		 (list))))


	 (define/public (give-castling-moves)
	   (let* ([dummy-piece (new chess-piece%)]
	 	  [rank (if (eq? (get-turn) "white")
	 		    1 8)]
	 	  [short-castle-enable (if (eq? (get-turn) "white")
	 				   (get-scew)
	 				   (get-sceb))]
	 	  [long-castle-enable (if (eq? (get-turn) "white")
	 				  (get-lcew)
	 				  (get-lceb))]
                  [board-pos (get-board-position)]
	 	  [self-position (get-self-position)]
	 	  [enemy-position (get-enemy-position)])

	     (begin
	       (cons
		(if short-castle-enable
		    (if (and (send dummy-piece resolvable? self-position (cons 6 rank))
			     (send dummy-piece resolvable? self-position (cons 7 rank))
			     (send dummy-piece resolvable? enemy-position (cons 6 rank))
			     (send dummy-piece resolvable? enemy-position (cons 7 rank))
			     (not (capturable? board-pos (cons 5 rank) (get-turn)))
			     (not (capturable? board-pos (cons 6 rank) (get-turn)))
			     (not (capturable? board-pos (cons 7 rank) (get-turn))))
			(if (eq? (get-turn) "white")
			    (cons (cons (change-pos2 (change-pos (list "K" (cons 5 rank) (cons 7 rank)))
						     (list "R" (cons 8 rank) (cons 6 rank)))
					enemy-position) (list #t))
			    (cons (cons enemy-position
					(change-pos2 (change-pos (list "K" (cons 5 rank) (cons 7 rank)))
						     (list "R" (cons 8 rank) (cons 6 rank)))) (list #t)))
			(list))
		    (list))
		(if long-castle-enable
		    (if (and (send dummy-piece resolvable? self-position (cons 4 rank))
			     (send dummy-piece resolvable? self-position (cons 3 rank))
			     (send dummy-piece resolvable? self-position (cons 2 rank))
			     (send dummy-piece resolvable? enemy-position (cons 4 rank))
			     (send dummy-piece resolvable? enemy-position (cons 3 rank))
			     (send dummy-piece resolvable? enemy-position (cons 2 rank))
			     (not (capturable? board-pos (cons 5 rank) (get-turn)))
			     (not (capturable? board-pos (cons 4 rank) (get-turn)))
			     (not (capturable? board-pos (cons 3 rank) (get-turn))))
			(if (eq? (get-turn) "white")
			    (list (cons (cons (change-pos2 (change-pos (list "K" (cons 5 rank) (cons 3 rank)))
							   (list "R" (cons 1 rank) (cons 4 rank)))
					      enemy-position) #f))
			    (list (cons (cons enemy-position
					      (change-pos2 (change-pos (list "K" (cons 5 rank) (cons 3 rank)))
							   (list "R" (cons 1 rank) (cons 4 rank)))) #f)))
			(list))
		    (list))))))
	 
	 (define/public (give-all-positions)
	   (define last-rank
	     (if (eq? (get-turn) "white")
		 8 1))
	   (append (king-side-castling-position) (queen-side-castling-position)
		   (filter (lambda (board-pos) (not (send this king-in-check? (get-field board-position board-pos))))
			   (foldr (lambda (move processed-list)
				    (if (and (eq? (first move) "P") (= (cdr (third move)) last-rank))
					(append (list 
						 (make-object complete-position% 
							      (append-properly (promotion-handler move "Q")
									       (send this capture (third move)))
							      (flip (get-turn)) move 
							      (figure 0 move) (figure 1 move) (figure 2 move) (figure 3 move))
						 (make-object complete-position% 
							      (append-properly (promotion-handler move "N")
									       (send this capture (third move)))
							      (flip (get-turn)) move 
							      (figure 0 move) (figure 1 move) (figure 2 move) (figure 3 move)))
						processed-list)
					(cons (make-object complete-position%
                                                (send this change-pos move)
                                                (flip (get-turn)) move 
							   (figure 0 move) (figure 1 move) (figure 2 move) (figure 3 move))
					      processed-list)))
				  (list) (get-all-moves)))))

	 (define (figure num move)
	   (cond [(and (eq? num 0) (eq? (get-turn) "white"))
		  (and (get-scew) (not (or (eq? (first move) "K")
					   (and (eq? (first move) "R") (equal? (second move) (cons 8 1))))))]
		 [(and (eq? num 1) (eq? (get-turn) "black"))
		  (and (get-sceb) (not (or (eq? (first move) "K")
					   (and (eq? (first move) "R") (equal? (second move) (cons 8 8))))))]
		 [(and (eq? num 2) (eq? (get-turn) "white"))
		  (and (get-lcew) (not (or (eq? (first move) "K")
					   (and (eq? (first move) "R") (equal? (second move) (cons 1 1))))))]
		 [(and (eq? num 3) (eq? (get-turn) "black"))
		  (and (get-lceb) (not (or (eq? (first move) "K")
					   (and (eq? (first move) "R") (equal? (second move) (cons 1 8))))))]
		 [else (cond [(eq? num 0) (get-scew)]
			     [(eq? num 1) (get-sceb)]
			     [(eq? num 2) (get-lcew)]
			     [(eq? num 3) (get-lceb)])]))

	 (define/public (append-properly self-position enemy-position)
	   (if (eq? (get-turn) "white")
	       (cons self-position enemy-position)
	       (cons enemy-position self-position)))

	 (define (get-self-position)
	   (if (eq? (get-turn) "white")
	       (car (get-board-position))
	       (cdr (get-board-position))))

	 (define (get-enemy-position)
	   (if (eq? (get-turn) "white")
	       (cdr (get-board-position))
	       (car (get-board-position))))

	 (define/public (get-turn)
	   (get-field turn complete-board-position))

	 (define/public (get-move)
	   (get-field move complete-board-position))

	 (define/public (get-board-position)
	   (get-field board-position complete-board-position))

	 (define/public (get-all-moves)
	   (foldr (lambda (cur-elem processed-list) (append (process cur-elem) processed-list))
		  (list) (get-self-position)))

	 (define/public (print)
	   (send complete-board-position print))))
