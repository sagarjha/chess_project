Welcome to Racket v5.3.3.
> stdin::0: read: #lang not enabled in the current context
> racket: undefined;
 cannot reference undefined identifier
> > > > > > > > > > > > > > (define P1 (new pawn%
					   (pos (4 4))))
application: not a procedure;
 expected a procedure that can be applied to arguments
  given: 4
  arguments...:
   4
> (define P1 (new pawn% (pos (cons 4 4))))
> (send P1 get-position)
'(4 . 4)
> (define P2 (new pawn% (pos (cons 1 2))))
> (send P1 get-all-moves 'white)
send: no such method
  method name: get-all-moves
  class name: pawn%
> (send P1 give-all-moves 'white)
'((3 . 5) (4 . 5) (5 . 5))
> (send P1 give-all-moves 'black)
'((3 . 3) (4 . 3) (5 . 3))
> (send P2 give-all-moves 'white)
'((1 . 4) (1 . 3) (2 . 3))
> (send P2 give-all-moves 'black)
'((1 . 1) (2 . 1))
> (define N (new knight% (pos (cons 5 6))))
> (send N give-all-moves)
'((4 . 4) (4 . 8) (6 . 4) (6 . 8) (3 . 5) (3 . 7) (7 . 5) (7 . 7))
> (send N set-position! (cons 1 5))
> (send N give-all-moves)
'((2 . 3) (2 . 7) (3 . 4) (3 . 6))
> (send N set-position! (cons 8 8))
> (send N give-all-moves)
'((7 . 6) (6 . 7))
> (define B (new bishop% (pos (cons 3 6))))
> (send B give-all-moves)
'((1 . 4)
  (2 . 5)
  (4 . 7)
  (5 . 8)
  (1 . 8)
  (2 . 7)
  (4 . 5)
  (5 . 4)
  (6 . 3)
  (7 . 2)
  (8 . 1))
> (send B set-position! (pos (cons 1 8)))
pos: undefined;
 cannot reference undefined identifier
> (send B set-position! (cons 1 8))
> (send B give-all-moves)
'((2 . 7) (3 . 6) (4 . 5) (5 . 4) (6 . 3) (7 . 2) (8 . 1))
> (define R (new rook% (pos (cons 5 5))))
> (send R give-all-moves)
'((1 . 5)
  (2 . 5)
  (3 . 5)
  (4 . 5)
  (6 . 5)
  (7 . 5)
  (8 . 5)
  (5 . 1)
  (5 . 2)
  (5 . 3)
  (5 . 4)
  (5 . 6)
  (5 . 7)
  (5 . 8))
> (send R set-position! (cons 8 1))
> (send R give-all-moves)
'((1 . 1)
  (2 . 1)
  (3 . 1)
  (4 . 1)
  (5 . 1)
  (6 . 1)
  (7 . 1)
  (8 . 2)
  (8 . 3)
  (8 . 4)
  (8 . 5)
  (8 . 6)
  (8 . 7)
  (8 . 8))
> (define Q (new queen% (pos (cons 6 6))))
> (send Q give-all-moves)
'((1 . 1)
  (2 . 2)
  (3 . 3)
  (4 . 4)
  (5 . 5)
  (7 . 7)
  (8 . 8)
  (4 . 8)
  (5 . 7)
  (7 . 5)
  (8 . 4)
  (1 . 6)
  (2 . 6)
  (3 . 6)
  (4 . 6)
  (5 . 6)
  (7 . 6)
  (8 . 6)
  (6 . 1)
  (6 . 2)
  (6 . 3)
  (6 . 4)
  (6 . 5)
  (6 . 7)
  (6 . 8))
> (define K (new king% (pos (cons 2 7))))
> (send K give-all-moves)
'((1 . 6) (1 . 7) (1 . 8) (2 . 6) (2 . 7) (2 . 8) (3 . 6) (3 . 7) (3 . 8))
> (send K set-position! (cons 4 8))
> (send K give-all-moves)
'((3 . 7) (3 . 8) (4 . 7) (4 . 8) (5 . 7) (5 . 8))
> 